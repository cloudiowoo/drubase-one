<?php

/**
 * @file
 * Install, update and uninstall functions for Drubase One profile.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\user\Entity\User;
use Drupal\user\Entity\Role;
use Drupal\baas_platform\GroupsStaticDataImporter;

/**
 * Implements hook_install().
 */
function baas_platform_install() {
  // 确保核心模块已启用（用于完整的 Drupal 功能）
  $core_modules = [
    'dblog', 'syslog', 'block', 'block_content', 'path', 'menu_ui',
    'page_cache', 'dynamic_page_cache', 'field_ui', 'help', 'config',
    'contextual', 'menu_link_content', 'taxonomy', 'big_pipe', 'views'
  ];

  $modules_to_enable = [];
  foreach ($core_modules as $module) {
    if (!\Drupal::moduleHandler()->moduleExists($module)) {
      $modules_to_enable[] = $module;
    }
  }

  if (!empty($modules_to_enable)) {
    \Drupal::service('module_installer')->install($modules_to_enable, TRUE);
    \Drupal::logger('baas_platform')->info('Enabled core modules: @modules', [
      '@modules' => implode(', ', $modules_to_enable)
    ]);
  }

  // 配置dblog设置
  \Drupal::configFactory()->getEditable('dblog.settings')
    ->set('row_limit', 10000)  // 增加日志条目限制，便于调试
    ->save();

  // 按正确的依赖顺序启用BaaS模块（参考demo_umami模式）
  // baas_tenant 已在info.yml中启用
  $modules_to_install = [
    'baas_auth',     // 依赖 baas_tenant
    'baas_entity',   // 依赖 baas_tenant
    'baas_project',  // 依赖 baas_tenant, baas_entity
    'baas_api',      // 依赖 baas_tenant, baas_auth, baas_entity, baas_project
    'baas_file',     // 依赖 baas_tenant, baas_project
    'baas_realtime', // 依赖 baas_tenant, baas_project
    'baas_functions' // 依赖 baas_tenant, baas_project
  ];

  \Drupal::service('module_installer')->install($modules_to_install, TRUE);
  \Drupal::logger('baas_platform')->info('BaaS modules installed in dependency order: @modules', [
    '@modules' => implode(', ', $modules_to_install)
  ]);

  // 重建路由器，确保BaaS模块的路由生效（参考demo_umami模式）
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // 首先设置状态以触发演示数据导入（必须在其他操作之前）
  \Drupal::state()->set('baas_platform.import_demo_data', TRUE);

  // 确保主题已安装并设置主题配置
  $theme_handler = \Drupal::service('theme_handler');
  $theme_installer = \Drupal::service('theme_installer');

  // 安装 Olivero 和 Gin 主题（如果还未安装）
  $themes_to_install = [];
  if (!$theme_handler->themeExists('olivero')) {
    $themes_to_install[] = 'olivero';
  }
  if (!$theme_handler->themeExists('gin')) {
    $themes_to_install[] = 'gin';
  }

  if (!empty($themes_to_install)) {
    $theme_installer->install($themes_to_install);
    \Drupal::logger('baas_platform')->info('Installed themes: @themes', [
      '@themes' => implode(', ', $themes_to_install)
    ]);
  }

  // 设置主题配置
  \Drupal::configFactory()->getEditable('system.theme')
    ->set('default', 'olivero')  // 前台使用 Olivero 主题
    ->set('admin', 'gin')        // 管理后台使用 Gin 主题
    ->save();

  \Drupal::logger('baas_platform')->info('Theme configuration set: frontend=olivero, admin=gin');

  // 禁用旧版API限流（保留新版ApiRateLimitSubscriber）
  // 旧版使用 ApiRequestSubscriber + RateLimiter，有服务依赖问题
  // 新版使用 ApiRateLimitSubscriber + RateLimitService，功能更完善
  \Drupal::state()->set('baas_api.rate_limiting_enabled', FALSE);
  \Drupal::logger('baas_platform')->info('Disabled legacy rate limiting (ApiRequestSubscriber)');

  // BaaS角色通过 config/install 目录中的 user.role.*.yml 文件自动创建
  // 但需要在所有模块安装后强制重新导入，确保权限完整
  _baas_platform_import_roles();

  // 导入文件管理视图配置（Views模块的可选配置）
  _baas_platform_import_file_views();

  // 初始化BaaS平台
  _baas_platform_initialize();

  // Install the demo data import module after all BaaS modules are installed
  // This follows the same pattern as demo_umami profile
  // Can't be specified as a dependency in the .info.yml file, as it requires
  // configuration provided by the BaaS modules (services, entity types etc.)
  \Drupal::service('module_installer')->install(['baas_platform_demo_data'], TRUE);
  \Drupal::logger('baas_platform')->info('BaaS platform demo data module installed');

  \Drupal::messenger()->addMessage(t('Drubase One with Groups Sports demonstration project has been set up successfully!'));
}

/**
 * Force import role configurations from profile to ensure complete permissions.
 *
 * Drupal's auto-import may skip permissions if dependent modules aren't installed yet.
 * This function re-imports all role configs after all BaaS modules are enabled.
 */
function _baas_platform_import_roles() {
  $profile_path = \Drupal::service('extension.list.profile')->getPath('baas_platform');
  $config_install_path = $profile_path . '/config/install';

  if (!is_dir($config_install_path)) {
    \Drupal::logger('baas_platform')->warning('Role config directory not found: @path', [
      '@path' => $config_install_path
    ]);
    return;
  }

  // Get all role config files
  $role_files = glob($config_install_path . '/user.role.*.yml');

  if (empty($role_files)) {
    \Drupal::logger('baas_platform')->warning('No role config files found in @path', [
      '@path' => $config_install_path
    ]);
    return;
  }

  $config_factory = \Drupal::configFactory();
  $yaml_parser = new \Symfony\Component\Yaml\Parser();

  $imported_count = 0;

  foreach ($role_files as $file_path) {
    $filename = basename($file_path);
    $config_name = str_replace('.yml', '', $filename);

    try {
      // Read YAML file
      $config_data = $yaml_parser->parse(file_get_contents($file_path));

      // Remove UUID and _core (not needed for install)
      unset($config_data['uuid']);
      unset($config_data['_core']);

      // Remove dependencies to avoid validation errors
      unset($config_data['dependencies']);

      // Get or create config object
      $config = $config_factory->getEditable($config_name);

      // Set all data
      foreach ($config_data as $key => $value) {
        $config->set($key, $value);
      }

      // Save config
      $config->save();

      $imported_count++;
      $perm_count = isset($config_data['permissions']) ? count($config_data['permissions']) : 0;

      \Drupal::logger('baas_platform')->info('Imported role @role with @count permissions', [
        '@role' => $config_data['id'] ?? $config_name,
        '@count' => $perm_count
      ]);

    } catch (\Exception $e) {
      \Drupal::logger('baas_platform')->error('Failed to import role config @file: @error', [
        '@file' => $filename,
        '@error' => $e->getMessage()
      ]);
    }
  }

  \Drupal::logger('baas_platform')->info('Imported @count role configurations with complete permissions', [
    '@count' => $imported_count
  ]);

  // Clear cache to ensure permissions are recognized
  drupal_flush_all_caches();
}

/**
 * Import file management views from Drupal core's optional configs.
 *
 * The views.view.files configuration provides /admin/content/files page.
 * It's in config/optional, so needs manual import during profile installation.
 */
function _baas_platform_import_file_views() {
  // Check if views module is enabled
  if (!\Drupal::moduleHandler()->moduleExists('views')) {
    \Drupal::logger('baas_platform')->warning('Views module not enabled, skipping file views import');
    return;
  }

  // Path to the file views config in Drupal core
  $core_file_module_path = \Drupal::service('extension.list.module')->getPath('file');
  $views_config_path = $core_file_module_path . '/config/optional/views.view.files.yml';

  if (!file_exists($views_config_path)) {
    \Drupal::logger('baas_platform')->warning('File views config not found: @path', [
      '@path' => $views_config_path
    ]);
    return;
  }

  try {
    // Read and parse YAML file
    $yaml_parser = new \Symfony\Component\Yaml\Parser();
    $config_data = $yaml_parser->parse(file_get_contents($views_config_path));

    // Remove UUID and _core (not needed for install)
    unset($config_data['uuid']);
    unset($config_data['_core']);

    // Import config
    $config = \Drupal::configFactory()->getEditable('views.view.files');

    // Set all data
    foreach ($config_data as $key => $value) {
      $config->set($key, $value);
    }

    // Save config
    $config->save();

    \Drupal::logger('baas_platform')->info('Successfully imported file management views (views.view.files)');

    // Grant "access files overview" permission to relevant roles
    $roles_to_grant = ['administrator', 'project_owner', 'project_manager', 'project_admin'];
    foreach ($roles_to_grant as $role_id) {
      $role = \Drupal\user\Entity\Role::load($role_id);
      if ($role && !$role->hasPermission('access files overview')) {
        $role->grantPermission('access files overview');
        $role->save();
        \Drupal::logger('baas_platform')->info('Granted "access files overview" permission to @role', [
          '@role' => $role_id
        ]);
      }
    }

    // Clear cache to ensure views are recognized
    \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();

  } catch (\Exception $e) {
    \Drupal::logger('baas_platform')->error('Failed to import file views: @error', [
      '@error' => $e->getMessage()
    ]);
  }
}

/**
 * Initialize BaaS platform with default configuration.
 */
function _baas_platform_initialize() {
  // 创建默认租户
  if (\Drupal::moduleHandler()->moduleExists('baas_tenant')) {
    $tenant_service = \Drupal::service('baas_tenant.manager');
    // 使用管理员用户作为默认租户的所有者
    $admin_user = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => 'admin']);
    $admin_user = reset($admin_user);
    if ($admin_user) {
      $tenant_service->createTenant('Default Tenant', (int) $admin_user->id(), ['status' => 1]);
    }
  }
  
  // 设置默认API配置
  if (\Drupal::moduleHandler()->moduleExists('baas_api')) {
    \Drupal::configFactory()->getEditable('baas_api.settings')
      ->set('enable_rate_limiting', TRUE)
      ->set('rate_limits.user.requests', 60)
      ->set('rate_limits.user.window', 60)
      ->set('rate_limits.ip.requests', 30)
      ->set('rate_limits.ip.window', 60)
      ->save();
  }

  // 设置默认文件配置
  if (\Drupal::moduleHandler()->moduleExists('baas_file')) {
    \Drupal::configFactory()->getEditable('baas_file.settings')
      ->set('storage_limit_default', '1GB')
      ->set('allowed_extensions', 'jpg jpeg png gif pdf doc docx txt')
      ->set('max_file_size', '10MB')
      ->save();
  }
}

/**
 * Import Groups project demonstration data from static files.
 *
 * NOTE: This function is deprecated and kept for reference.
 * Demo data import is now handled by hook_modules_installed() in baas_platform.module
 * for proper timing after all modules are installed and configured.
 */
function _baas_platform_import_demo_data() {
  try {
    // Check if user selected to import demo data
    $import_demo = \Drupal::state()->get('baas_platform.import_demo_data', FALSE);
    
    if (!$import_demo) {
      return;
    }
    
    // Initialize Groups static data importer
    $importer = new GroupsStaticDataImporter(
      \Drupal::database(),
      \Drupal::service('logger.factory'),
      \Drupal::service('entity_type.manager'),
      \Drupal::service('config.factory')
    );
    
    // Import Groups static data (preserves original structure)
    $import_results = $importer->importGroupsStaticData();
    
    if (!$import_results['success']) {
      \Drupal::logger('baas_platform')->error('Groups static data import failed: @errors', [
        '@errors' => implode(', ', $import_results['errors'])
      ]);
      \Drupal::messenger()->addError(t('Groups demo data import failed. Check logs for details.'));
      return;
    }
    
    // Validate import results
    $validation = $importer->validateImport();
    
    if (!$validation['valid']) {
      \Drupal::logger('baas_platform')->warning('Groups data import validation issues: @issues', [
        '@issues' => implode(', ', $validation['issues'])
      ]);
    }
    
    // Mark demo data as imported
    \Drupal::state()->set('baas_platform.demo_data_imported', TRUE);
    \Drupal::state()->set('baas_platform.demo_project_type', 'groups_sports_original');
    \Drupal::state()->set('baas_platform.demo_tenant_id', 'tenant_7375b0cd');
    \Drupal::state()->set('baas_platform.demo_project_id', 'tenant_7375b0cd_project_6888d012be80c');
    
    $total_records = array_sum($import_results['data_imported']);
    \Drupal::messenger()->addMessage(t('Groups Sports project imported successfully! @records demo records, @entities entity files deployed. Original structure preserved.', [
      '@records' => $total_records,
      '@entities' => count($import_results['entity_files_deployed'])
    ]));
    
  } catch (\Exception $e) {
    \Drupal::logger('baas_platform')->error('Groups static data import failed: @error', ['@error' => $e->getMessage()]);
    \Drupal::messenger()->addError(t('Groups demo data import failed. Please check the logs for details.'));
  }
}





/**
 * Create demonstration users for Groups project.
 *
 * NOTE: This function is deprecated and kept for reference.
 * Demo user creation is now handled by _baas_platform_create_demo_users_delayed()
 * in baas_platform.module via hook_modules_installed() for proper timing.
 */
function _baas_platform_create_demo_users() {
  // Groups project demo tenant admin
  $groups_admin = User::create([
    'name' => 'groups_admin',
    'mail' => 'admin@demo.groups.com',
    'pass' => 'groups_demo_123',
    'status' => 1,
    'roles' => ['administrator', 'tenant_admin'],
  ]);
  $groups_admin->save();

  // Groups project manager
  $groups_manager = User::create([
    'name' => 'groups_manager',
    'mail' => 'manager@demo.groups.com',
    'pass' => 'groups_demo_123',
    'status' => 1,
    'roles' => ['project_admin', 'tenant_admin'],
  ]);
  $groups_manager->save();

  // Groups regular user (activity organizer)
  $groups_organizer = User::create([
    'name' => 'groups_organizer',
    'mail' => 'organizer@demo.groups.com',
    'pass' => 'groups_demo_123',
    'status' => 1,
    'roles' => ['api_developer'],
  ]);
  $groups_organizer->save();

  // Groups participant user
  $groups_participant = User::create([
    'name' => 'groups_participant',
    'mail' => 'participant@demo.groups.com',
    'pass' => 'groups_demo_123',
    'status' => 1,
    'roles' => ['authenticated'],
  ]);
  $groups_participant->save();

  // Associate users with Groups original tenant (保持原始ID)
  if (\Drupal::moduleHandler()->moduleExists('baas_tenant')) {
    $tenant_mapping_service = \Drupal::service('baas_auth.user_tenant_mapping');
    
    // Map all demo users to original Groups tenant
    $demo_users = [$groups_admin, $groups_manager, $groups_organizer, $groups_participant];
    foreach ($demo_users as $user) {
      try {
        $tenant_mapping_service->mapUserToTenant($user->id(), 'tenant_7375b0cd');
      } catch (\Exception $e) {
        \Drupal::logger('baas_platform')->warning('Failed to map user @user to Groups tenant: @error', [
          '@user' => $user->getAccountName(),
          '@error' => $e->getMessage(),
        ]);
      }
    }
  }

  // Associate project admin with Groups original project (保持原始ID)
  if (\Drupal::moduleHandler()->moduleExists('baas_project')) {
    $project_member_service = \Drupal::service('baas_project.member_manager');
    
    try {
      // Add Groups manager as project admin
      $project_member_service->addMember('tenant_7375b0cd_project_6888d012be80c', $groups_manager->id(), [
        'role' => 'admin',
        'permissions' => ['manage_entities', 'manage_data', 'manage_members'],
      ]);
      
      // Add Groups organizer as project member
      $project_member_service->addMember('tenant_7375b0cd_project_6888d012be80c', $groups_organizer->id(), [
        'role' => 'member',
        'permissions' => ['create_activities', 'manage_teams'],
      ]);
      
      // Add Groups participant as viewer
      $project_member_service->addMember('tenant_7375b0cd_project_6888d012be80c', $groups_participant->id(), [
        'role' => 'viewer',
        'permissions' => ['view_activities', 'join_teams'],
      ]);
      
    } catch (\Exception $e) {
      \Drupal::logger('baas_platform')->warning('Failed to assign project memberships: @error', [
        '@error' => $e->getMessage(),
      ]);
    }
  }

  \Drupal::logger('baas_platform')->info('Created 4 demo users for Groups project with proper tenant and project associations');
}